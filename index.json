{
  "api/DIV2.Format.Exporter.Color.html": {
    "href": "api/DIV2.Format.Exporter.Color.html",
    "title": "Struct Color",
    "keywords": "Struct Color Color structure. Namespace : DIV2.Format.Exporter Assembly : DIV2.Format.Exporter.dll Syntax public struct Color : ISerializableAsset Remarks Represents a RGB color format value. Constructors Color(BinaryReader) Creates a new Color value. Declaration public Color(BinaryReader stream) Parameters Type Name Description BinaryReader stream stream that contains the Color value. Color(Byte, Byte, Byte) Creates a new Color value. Declaration public Color(byte red, byte green, byte blue) Parameters Type Name Description Byte red Red component value. Byte green Green component value. Byte blue Blue component value. Color(Byte[]) Creates a new Color value. Declaration public Color(byte[] buffer) Parameters Type Name Description Byte [] buffer A 3 length array that contains the Color component values. Color(Int32, Int32, Int32) Creates a new Color value. Declaration public Color(int red, int green, int blue) Parameters Type Name Description Int32 red Red component value. Int32 green Green component value. Int32 blue Blue component value. Fields blue Blue component. Declaration public byte blue Field Value Type Description Byte A value between 0 and 255. green Green component. Declaration public byte green Field Value Type Description Byte A value between 0 and 255. LENGTH Declaration public const int LENGTH = null Field Value Type Description Int32 Number of components. MAX_DAC_VALUE Declaration public const byte MAX_DAC_VALUE = null Field Value Type Description Byte Max supported value in DAC format [0..63]. red Red component. Declaration public byte red Field Value Type Description Byte A value between 0 and 255. SIZE Declaration public const int SIZE = null Field Value Type Description Int32 Memory size. Properties Item[Int32] Gets or sets the component color value. Declaration public byte this[int index] { get; set; } Parameters Type Name Description Int32 index Index of the component. Property Value Type Description Byte Returns the component color value. Methods GetHashCode() Generates a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 Returns an value composed by the RGB values for the first 3 bytes and a zero for fourth byte. IsDAC() Is a valid DAC color value? Declaration public bool IsDAC() Returns Type Description Boolean Returns true if the RGB components are into the DAC range values [0..63]. Normalize(ColorFormat) Gets a with normalized values [0..1]. Declaration public Vector3 Normalize(ColorFormat colorType) Parameters Type Name Description ColorFormat colorType Indicates the color range for set the normalization factor. Returns Type Description Vector3 Returns a with the Color components normalized. ToDAC() Converts RGB values [0..255] to DAC range [0..63]. Declaration public Color ToDAC() Returns Type Description Color Returns new Color value in DAC range [0..63]. In most of the cases, this value is an aproximation to the real DAC value. Remarks DIV Games Studio and other software that works in old VESA modes, using the DAC format for colors instead of full RGB format. Use this function to adapt RGB values to DAC in order to work properly with DIV Games Studio. ToRGB() Converts DAC values [0..63] to RGB range [0..255]. Declaration public Color ToRGB() Returns Type Description Color Returns new Color value in RGB range [0..255]. In most of the cases, this value is an aproximation to the real RGB value. Remarks DIV Games Studio and other software that works in old VESA modes, using the DAC format for colors instead of full RGB format. Use this function to adapt DAC values to RGB in order to work properly with modern implementations. ToString() Serializes the relevant data of this instance in a value. Declaration public override string ToString() Returns Type Description String Returns a value with the relevant serialized data in JSON format. Operators Equality(Color, Color) Equality operator. Declaration public static bool operator ==(Color a, Color b) Parameters Type Name Description Color a Left Color value to compare. Color b Right Color value to compare. Returns Type Description Boolean Returns true if both values are equal. Explicit(Color to Int32) Cast the Color value to value. Declaration public static explicit operator int (Color value) Parameters Type Name Description Color value Color value. Returns Type Description Int32 Returns the value from the Color value. GreaterThan(Color, Color) Greater than operator. Declaration public static bool operator>(Color a, Color b) Parameters Type Name Description Color a Left Color value to compare. Color b Right Color value to compare. Returns Type Description Boolean Returns true if the left value are greater than the right value. GreaterThanOrEqual(Color, Color) Greater than or equal operator. Declaration public static bool operator >=(Color a, Color b) Parameters Type Name Description Color a Left Color value to compare. Color b Right Color value to compare. Returns Type Description Boolean Returns true if the left value are greater or equal than the right value. Implicit(Int32 to Color) Cast an value to Color value. Declaration public static implicit operator Color(int value) Parameters Type Name Description Int32 value value. Returns Type Description Color Returns the Color value from the value. Inequality(Color, Color) Inequality operator. Declaration public static bool operator !=(Color a, Color b) Parameters Type Name Description Color a Left Color value to compare. Color b Right Color value to compare. Returns Type Description Boolean Returns true if both values are not equal. LessThan(Color, Color) Less than operator. Declaration public static bool operator <(Color a, Color b) Parameters Type Name Description Color a Left Color value to compare. Color b Right Color value to compare. Returns Type Description Boolean Returns true if the left value are less than the right value. LessThanOrEqual(Color, Color) Less than or equal operator. Declaration public static bool operator <=(Color a, Color b) Parameters Type Name Description Color a Left Color value to compare. Color b Right Color value to compare. Returns Type Description Boolean Returns true if the left value are less or equal than the right value."
  },
  "api/DIV2.Format.Exporter.ColorFormat.html": {
    "href": "api/DIV2.Format.Exporter.ColorFormat.html",
    "title": "Enum ColorFormat",
    "keywords": "Enum ColorFormat Color formats. Namespace : DIV2.Format.Exporter Assembly : DIV2.Format.Exporter.dll Syntax public enum ColorFormat : byte Fields Name Description DAC DAC format [0..63]. RGB RGB format [0..255]."
  },
  "api/DIV2.Format.Exporter.ColorPalette.html": {
    "href": "api/DIV2.Format.Exporter.ColorPalette.html",
    "title": "Class ColorPalette",
    "keywords": "Class ColorPalette A representation of a 256 indexed color palette in DAC format [0..63]. Inheritance Object ColorPalette Implements IEnumerable < Color > Namespace : DIV2.Format.Exporter Assembly : DIV2.Format.Exporter.dll Syntax public sealed class ColorPalette : object, ISerializableAsset, IEnumerable<Color> Constructors ColorPalette() Creates a new Color palette. Declaration public ColorPalette() ColorPalette(BinaryReader) Creates a new Color palette from memory. Declaration public ColorPalette(BinaryReader stream) Parameters Type Name Description BinaryReader stream A stream that contains the data of the 256 Color values. ColorPalette(Color[]) Creates a new Color palette from memory. Declaration public ColorPalette(Color[] colors) Parameters Type Name Description Color [] colors A 256 length Color array. ColorPalette(Byte[]) Creates a new Color palette from memory. Declaration public ColorPalette(byte[] buffer) Parameters Type Name Description Byte [] buffer A 768 length array that contains the data of the 256 Color values. Fields LENGTH Declaration public const int LENGTH = null Field Value Type Description Int32 Number of colors. SIZE Declaration public const int SIZE = null Field Value Type Description Int32 Memory size of the palette. Properties Item[Int32] Gets or sets a Color value in DAC format [0..63]. Declaration public Color this[int index] { get; set; } Parameters Type Name Description Int32 index Index in palette. Property Value Type Description Color Returns the Color value. Methods GetHashCode() Generates a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 Returns an SHA256 hash code from the MD5 hash created by the binary serialized data of this instance. Sort() Sorts the Color values. Declaration public void Sort() Remarks This method try to sort the colors using the Nearest Neighbour algorithm, trying to ensure that the black color (0, 0, 0), if exists in palette, be the first color. This implementation is based on this article: https://www.alanzucconi.com/2015/09/30/colour-sorting/ ToArray() Gets the Color array from this instance. Declaration public Color[] ToArray() Returns Type Description Color [] Returns new Color array of DAC values [0..63]. Remarks Use the ToRGB() function get a full RGB range [0..255] Color array. ToRGB() Gets a full RGB range values [0..255]. Declaration public Color[] ToRGB() Returns Type Description Color [] Returns new Color array of full RGB values [0..255]. In most of the cases, this value is an aproximation to the real RGB value. ToString() Serializes the relevant data of this instance in a value. Declaration public override string ToString() Returns Type Description String Returns a value with the relevant serialized data in JSON format. Operators Equality(ColorPalette, ColorPalette) Equality operator. Declaration public static bool operator ==(ColorPalette a, ColorPalette b) Parameters Type Name Description ColorPalette a Left ColorPalette value to compare. ColorPalette b Right ColorPalette value to compare. Returns Type Description Boolean Returns true if both values are equal. Inequality(ColorPalette, ColorPalette) Inequality operator. Declaration public static bool operator !=(ColorPalette a, ColorPalette b) Parameters Type Name Description ColorPalette a Left ColorPalette value to compare. ColorPalette b Right ColorPalette value to compare. Returns Type Description Boolean Returns true if both values are not equal. Implements IEnumerable<>"
  },
  "api/DIV2.Format.Exporter.ColorRange.html": {
    "href": "api/DIV2.Format.Exporter.ColorRange.html",
    "title": "Class ColorRange",
    "keywords": "Class ColorRange Color range values. Inheritance Object ColorRange Implements IEnumerable < Byte > Namespace : DIV2.Format.Exporter Assembly : DIV2.Format.Exporter.dll Syntax public sealed class ColorRange : object, ISerializableAsset, IEnumerable<byte> Constructors ColorRange(ref Byte) Creates a new ColorRange instance with default values. Declaration public ColorRange(ref byte startColorIndex) Parameters Type Name Description Byte startColorIndex The start color index to setup the range. Remarks By default, when initialize the 16 ranges in a PAL , the idea is create a ramp values from 0 to 255 values and repeat until completes all 16 ranges. This process is automatically setup in ColorRangeTable default constructor. ColorRange(Byte[]) Creates a new color range from memory. Declaration public ColorRange(byte[] buffer) Parameters Type Name Description Byte [] buffer A array that contains the ColorRange data. Fields blackColor Declaration public byte blackColor Field Value Type Description Byte Index of the black color. Default is zero. colors Declaration public ColorRange.RangeColors colors Field Value Type Description ColorRange.RangeColors Amount of colors for the range. DEFAULT_BLACK_COLOR Declaration public const int DEFAULT_BLACK_COLOR = null Field Value Type Description Int32 Default value for blackColor field. DEFAULT_FIXED_STATE Declaration public const bool DEFAULT_FIXED_STATE = null Field Value Type Description Boolean Default value for isFixed field. DEFAULT_RANGE_COLORS Declaration public const ColorRange.RangeColors DEFAULT_RANGE_COLORS = default(ColorRange.RangeColors) Field Value Type Description ColorRange.RangeColors Default value for colors field. DEFAULT_TYPE Declaration public const ColorRange.RangeTypes DEFAULT_TYPE = default(ColorRange.RangeTypes) Field Value Type Description ColorRange.RangeTypes Default value for type field. isFixed Declaration public bool isFixed Field Value Type Description Boolean Defines if the range is editable (false) or not (true). By default is false. LENGTH Declaration public const int LENGTH = null Field Value Type Description Int32 Number of color index entries in the range. SIZE Declaration public const int SIZE = null Field Value Type Description Int32 Memory size of the range. type Declaration public ColorRange.RangeTypes type Field Value Type Description ColorRange.RangeTypes Range type. Properties Item[Int32] Gets or sets the range entry value. Declaration public byte this[int index] { get; set; } Parameters Type Name Description Int32 index Index of the entry. Property Value Type Description Byte Returns the range entry value. Methods GetHashCode() Generates a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 Returns an SHA256 hash code from the MD5 hash created by the binary serialized data of this instance. ToString() Serializes the relevant data of this instance in a value. Declaration public override string ToString() Returns Type Description String Returns a value with the relevant serialized data in JSON format. Operators Equality(ColorRange, ColorRange) Equality operator. Declaration public static bool operator ==(ColorRange a, ColorRange b) Parameters Type Name Description ColorRange a Left ColorRange value to compare. ColorRange b Right ColorRange value to compare. Returns Type Description Boolean Returns true if both values are equal. Inequality(ColorRange, ColorRange) Inequality operator. Declaration public static bool operator !=(ColorRange a, ColorRange b) Parameters Type Name Description ColorRange a Left ColorRange value to compare. ColorRange b Right ColorRange value to compare. Returns Type Description Boolean Returns true if both values are not equal. Implements IEnumerable<>"
  },
  "api/DIV2.Format.Exporter.ColorRange.RangeColors.html": {
    "href": "api/DIV2.Format.Exporter.ColorRange.RangeColors.html",
    "title": "Enum ColorRange.RangeColors",
    "keywords": "Enum ColorRange.RangeColors Available amount of colors for the range. Namespace : DIV2.Format.Exporter Assembly : DIV2.Format.Exporter.dll Syntax public enum RangeColors : byte Fields Name Description _16 16 colors. _32 32 colors. _8 8 colors."
  },
  "api/DIV2.Format.Exporter.ColorRange.RangeTypes.html": {
    "href": "api/DIV2.Format.Exporter.ColorRange.RangeTypes.html",
    "title": "Enum ColorRange.RangeTypes",
    "keywords": "Enum ColorRange.RangeTypes Available range types. Namespace : DIV2.Format.Exporter Assembly : DIV2.Format.Exporter.dll Syntax public enum RangeTypes : byte Fields Name Description Direct Direct from palette. Edit1 Editable each color. Edit2 Editable each 2 colors. Edit4 Editable each 4 colors. Edit8 Editable each 8 colors."
  },
  "api/DIV2.Format.Exporter.ColorRangeTable.html": {
    "href": "api/DIV2.Format.Exporter.ColorRangeTable.html",
    "title": "Class ColorRangeTable",
    "keywords": "Class ColorRangeTable A collection of 16 ranges that composes the PAL ColorRange table. Inheritance Object ColorRangeTable Implements IEnumerable < ColorRange > Namespace : DIV2.Format.Exporter Assembly : DIV2.Format.Exporter.dll Syntax public sealed class ColorRangeTable : object, ISerializableAsset, IEnumerable<ColorRange> Remarks The color ranges are used only in DIV Games Studio color and drawing tools. Not are used in games. By default is enough to creates a ColorRangeTable with default values. Constructors ColorRangeTable() Creates a new ColorRangeTable with default ColorRange values. Declaration public ColorRangeTable() ColorRangeTable(Byte[]) Creates a new ColorRangeTable from memory. Declaration public ColorRangeTable(byte[] buffer) Parameters Type Name Description Byte [] buffer A array that contains a ColorRangeTable data. Fields LENGTH Declaration public const int LENGTH = null Field Value Type Description Int32 Number of ColorRange s in the table. SIZE Declaration public const int SIZE = null Field Value Type Description Int32 Memory size of the color range table. Properties Item[Int32] Gets or sets the ColorRange value. Declaration public ColorRange this[int index] { get; set; } Parameters Type Name Description Int32 index Index of the range. Property Value Type Description ColorRange Returns the ColorRange value. Methods GetHashCode() Generates a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 Returns an SHA256 hash code from the MD5 hash created by the binary serialized data of this instance. ToString() Serializes the relevant data of this instance in a value. Declaration public override string ToString() Returns Type Description String Returns a value with the relevant serialized data in JSON format. Operators Equality(ColorRangeTable, ColorRangeTable) Equality operator. Declaration public static bool operator ==(ColorRangeTable a, ColorRangeTable b) Parameters Type Name Description ColorRangeTable a Left ColorRangeTable value to compare. ColorRangeTable b Right ColorRangeTable value to compare. Returns Type Description Boolean Returns true if both values are equal. Inequality(ColorRangeTable, ColorRangeTable) Inequality operator. Declaration public static bool operator !=(ColorRangeTable a, ColorRangeTable b) Parameters Type Name Description ColorRangeTable a Left ColorRangeTable value to compare. ColorRangeTable b Right ColorRangeTable value to compare. Returns Type Description Boolean Returns true if both values are not equal. Implements IEnumerable<>"
  },
  "api/DIV2.Format.Exporter.ControlPoint.html": {
    "href": "api/DIV2.Format.Exporter.ControlPoint.html",
    "title": "Struct ControlPoint",
    "keywords": "Struct ControlPoint MAP Control Point data. Namespace : DIV2.Format.Exporter Assembly : DIV2.Format.Exporter.dll Syntax public struct ControlPoint : ISerializableAsset Constructors ControlPoint(BinaryReader) Initializes a new instance. Declaration public ControlPoint(BinaryReader stream) Parameters Type Name Description BinaryReader stream A instance, that contains, in the current position, with 2 values for X and Y coordinates. ControlPoint(Byte[]) Initializes a new instance. Declaration public ControlPoint(byte[] buffer) Parameters Type Name Description Byte [] buffer 4 length array that contains the X and Y coordinates in format. ControlPoint(Double, Double) Initializes a new instance. Declaration public ControlPoint(double x, double y) Parameters Type Name Description Double x X coordinate. Double y Y coordinate. ControlPoint(Int16, Int16) Initializes a new instance. Declaration public ControlPoint(short x, short y) Parameters Type Name Description Int16 x X coordinate. Int16 y Y coordinate. ControlPoint(Int32, Int32) Initializes a new instance. Declaration public ControlPoint(int x, int y) Parameters Type Name Description Int32 x X coordinate. Int32 y Y coordinate. ControlPoint(Single, Single) Initializes a new instance. Declaration public ControlPoint(float x, float y) Parameters Type Name Description Single x X coordinate. Single y Y coordinate. Fields LENGTH Declaration public const int LENGTH = null Field Value Type Description Int32 Number of items. SIZE Declaration public const int SIZE = null Field Value Type Description Int32 Memory size. x Declaration public short x Field Value Type Description Int16 Horizontal coordinate. y Declaration public short y Field Value Type Description Int16 Vertical coordinate. Properties Item[Int32] Gets or sets the coordinate value. Declaration public short this[int index] { get; set; } Parameters Type Name Description Int32 index Index of the coordinate in the structure. Property Value Type Description Int16 Returns the coordinate value. Methods GetHashCode() Generates a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 Returns an value of X and Y coordinates XOR operation. ToString() Serializes the relevant data of this instance in a value. Declaration public override string ToString() Returns Type Description String Returns a value with the relevant serialized data in JSON format. Operators Equality(ControlPoint, ControlPoint) Equality operator. Declaration public static bool operator ==(ControlPoint a, ControlPoint b) Parameters Type Name Description ControlPoint a Left ControlPoint value to compare. ControlPoint b Right ControlPoint value to compare. Returns Type Description Boolean Returns true if both values are equal. Inequality(ControlPoint, ControlPoint) Inequality operator. Declaration public static bool operator !=(ControlPoint a, ControlPoint b) Parameters Type Name Description ControlPoint a Left ControlPoint value to compare. ControlPoint b Right ControlPoint value to compare. Returns Type Description Boolean Returns true if both values are not equal."
  },
  "api/DIV2.Format.Exporter.DIVFileFormatException-1.html": {
    "href": "api/DIV2.Format.Exporter.DIVFileFormatException-1.html",
    "title": "Class DIVFileFormatException<T>",
    "keywords": "Class DIVFileFormatException<T> An exception ocurred when a DIV Games Studio content data format is invalid. Inheritance Object DIVFileFormatException<T> Namespace : DIV2.Format.Exporter Assembly : DIV2.Format.Exporter.dll Syntax public sealed class DIVFileFormatException<T> : Exception where T : IAssetFile Type Parameters Name Description T DIV2.Format.Exporter.Interfaces.IAssetFile type that reprensents any DIV Games Studio format."
  },
  "api/DIV2.Format.Exporter.DIVFormatHeaderException.html": {
    "href": "api/DIV2.Format.Exporter.DIVFormatHeaderException.html",
    "title": "Class DIVFormatHeaderException",
    "keywords": "Class DIVFormatHeaderException An exception ocurred when the a DIV Games Studio file header is invalid. Inheritance Object DIVFormatHeaderException Namespace : DIV2.Format.Exporter Assembly : DIV2.Format.Exporter.dll Syntax public sealed class DIVFormatHeaderException : Exception"
  },
  "api/DIV2.Format.Exporter.ExtensionMethods.ByteExtensions.html": {
    "href": "api/DIV2.Format.Exporter.ExtensionMethods.ByteExtensions.html",
    "title": "Class ByteExtensions",
    "keywords": "Class ByteExtensions Extension methods for arrays. Inheritance Object ByteExtensions Namespace : DIV2.Format.Exporter.ExtensionMethods Assembly : DIV2.Format.Exporter.dll Syntax public static class ByteExtensions : object Methods CalculateChecksum(Byte[]) Calculates the checksum of this array. Declaration public static string CalculateChecksum(this byte[] buffer) Parameters Type Name Description Byte [] buffer array to calculate checksum. Returns Type Description String Returns the checksum value of this array. ClearBits(Byte, Byte) Clear bits of this value. Declaration public static byte ClearBits(this byte value, byte mask) Parameters Type Name Description Byte value value to clear bits. Byte mask mask to apply. Returns Type Description Byte Returns the value with the cleared bits."
  },
  "api/DIV2.Format.Exporter.ExtensionMethods.ColorExtensions.html": {
    "href": "api/DIV2.Format.Exporter.ExtensionMethods.ColorExtensions.html",
    "title": "Class ColorExtensions",
    "keywords": "Class ColorExtensions Extension methods for Color values. Inheritance Object ColorExtensions Namespace : DIV2.Format.Exporter.ExtensionMethods Assembly : DIV2.Format.Exporter.dll Syntax public static class ColorExtensions : object Methods ToByteArray(Color[]) Converts a Color array to array. Declaration public static byte[] ToByteArray(this Color[] colors) Parameters Type Name Description Color [] colors A 256 Color array length. Returns Type Description Byte [] Returns a array. ToColorArray(Byte[]) Converts a array to Color array. Declaration public static Color[] ToColorArray(this byte[] buffer) Parameters Type Name Description Byte [] buffer A 768 array length. Returns Type Description Color [] Returns a Color array. ToDAC(Color[]) Creates a new Color array in DAC format [0..63]. Declaration public static Color[] ToDAC(this Color[] colors) Parameters Type Name Description Color [] colors Color array in RGB format [0.255]. Returns Type Description Color [] Returns a new Color array in DAC format [0..63]. ToRGB(Color[]) Creates a new Color array in RGB format [0.255]. Declaration public static Color[] ToRGB(this Color[] colors) Parameters Type Name Description Color [] colors Color array in DAC format [0..63]. Returns Type Description Color [] Returns a new Color array in RGB format [0.255]."
  },
  "api/DIV2.Format.Exporter.ExtensionMethods.html": {
    "href": "api/DIV2.Format.Exporter.ExtensionMethods.html",
    "title": "Namespace DIV2.Format.Exporter.ExtensionMethods",
    "keywords": "Namespace DIV2.Format.Exporter.ExtensionMethods Classes ByteExtensions Extension methods for arrays. ColorExtensions Extension methods for Color values. MathExtensions Math helper extension methods. StringExtensions Extension methods for ASCIIZ (ASCII null terminated string or C string) instances."
  },
  "api/DIV2.Format.Exporter.ExtensionMethods.MathExtensions.html": {
    "href": "api/DIV2.Format.Exporter.ExtensionMethods.MathExtensions.html",
    "title": "Class MathExtensions",
    "keywords": "Class MathExtensions Math helper extension methods. Inheritance Object MathExtensions Namespace : DIV2.Format.Exporter.ExtensionMethods Assembly : DIV2.Format.Exporter.dll Syntax public static class MathExtensions : object Methods IsClamped(Byte, Byte, Byte) Is this value in range? Declaration public static bool IsClamped(this byte value, byte min, byte max) Parameters Type Name Description Byte value value instance. Byte min Min value of the range. Byte max Max value of the range. Returns Type Description Boolean Returns true if the value is in range. IsClamped(Int16, Int16, Int16) Is this value in range? Declaration public static bool IsClamped(this short value, short min, short max) Parameters Type Name Description Int16 value value instance. Int16 min Min value of the range. Int16 max Max value of the range. Returns Type Description Boolean Returns true if the value is in range. IsClamped(Int32, Int32, Int32) Is this value in range? Declaration public static bool IsClamped(this int value, int min, int max) Parameters Type Name Description Int32 value value instance. Int32 min Min value of the range. Int32 max Max value of the range. Returns Type Description Boolean Returns true if the value is in range. IsClamped(UInt32, UInt32, UInt32) Is this value in range? Declaration public static bool IsClamped(this uint value, uint min, uint max) Parameters Type Name Description UInt32 value value instance. UInt32 min Min value of the range. UInt32 max Max value of the range. Returns Type Description Boolean Returns true if the value is in range."
  },
  "api/DIV2.Format.Exporter.ExtensionMethods.StringExtensions.html": {
    "href": "api/DIV2.Format.Exporter.ExtensionMethods.StringExtensions.html",
    "title": "Class StringExtensions",
    "keywords": "Class StringExtensions Extension methods for ASCIIZ (ASCII null terminated string or C string) instances. Inheritance Object StringExtensions Namespace : DIV2.Format.Exporter.ExtensionMethods Assembly : DIV2.Format.Exporter.dll Syntax public static class StringExtensions : object Methods GetASCIIZString(String, Int32) Gets a binary representation of this in ASCIIZ format (ASCII null terminated string or C string). Declaration public static byte[] GetASCIIZString(this string text, int length) Parameters Type Name Description String text This instance. Int32 length Characters length. Returns Type Description Byte [] Returns a array with the content of the in ASCIIZ format. If the input string is shorter than the desired length, the string is filled with null chars. If the input string is longer than the length, getting a substring with the desired length. GetSecureHashCode(String) Returns a secure hash code for this string. Declaration public static int GetSecureHashCode(this string text) Parameters Type Name Description String text instance. Returns Type Description Int32 Returns a hash value. Remarks Use this function instead of default to unsure that gets a unmutable hash code. ToASCIIString(Byte[]) Gets representation, without null chars and other possible garbage data. Declaration public static string ToASCIIString(this byte[] buffer) Parameters Type Name Description Byte [] buffer array with the ASCIIZ string data (ASCII null terminated string or C string). Returns Type Description String Returns a instance in ASCII format, terminated with null chars. ToByteArray(Char[]) Returns a array representation of this string encoding as ASCII. Declaration public static byte[] ToByteArray(this char[] text) Parameters Type Name Description Char [] text This array instance. Returns Type Description Byte [] Returns a array representation of this encoding as ASCII. ToByteArray(String) Returns a array representation of this string encoding as ASCII. Declaration public static byte[] ToByteArray(this string text) Parameters Type Name Description String text This instance. Returns Type Description Byte [] Returns a array representation of this encoding as ASCII."
  },
  "api/DIV2.Format.Exporter.FPG.html": {
    "href": "api/DIV2.Format.Exporter.FPG.html",
    "title": "Class FPG",
    "keywords": "Class FPG A representation of a DIV Games Studio FPG file. Inheritance Object FPG Implements IEnumerable < MAP > Namespace : DIV2.Format.Exporter Assembly : DIV2.Format.Exporter.dll Syntax public sealed class FPG : object, IAssetFile, IFormatValidable, ISerializableAsset, IEnumerable<MAP> Remarks Implements functions to import, export and create File Package Graphic files. Constructors FPG(PAL) Creates a new FPG instance. Declaration public FPG(PAL palette) Parameters Type Name Description PAL palette The PAL instance used in this FPG instance. FPG(Byte[]) Loads a FPG file. Declaration public FPG(byte[] buffer) Parameters Type Name Description Byte [] buffer array that contain the FPG file data to load. FPG(String) Loads a FPG file. Declaration public FPG(string filename) Parameters Type Name Description String filename Filename to load. Properties Count Number of MAP objects stored in this FPG . Declaration public int Count { get; } Property Value Type Description Int32 Gets the number of MAP instances contained in the FPG . Item[Int32] Gets a MAP instance. Declaration public MAP this[int index] { get; } Parameters Type Name Description Int32 index Index of the MAP in the FPG . Property Value Type Description MAP Returns the MAP instance. Palette Color palette used by this FPG . Declaration public PAL Palette { get; } Property Value Type Description PAL Returns the PAL instance for this FPG object. Remarks All MAP s stored in the FPG shared this palette. Methods Add(MAP, String) Adds a MAP file. Declaration public void Add(MAP map, string filename = \"\") Parameters Type Name Description MAP map MAP instance to add. String filename Optional filename value in DOS 8:3 format. Remarks This method always performs a color conversion if the palette is different from the FPG instance to ensure the MAP image shows properly with the current palette. The filename field in the file only allows a 12 length ASCII null terminated string. If the input string is shorter than 12 characters, the string is filled with null chars. If the input string is longer than 12 characters, getting a 12 characters length substring. Add(Byte[], String) Adds a MAP file. Declaration public void Add(byte[] buffer, string filename = \"\") Parameters Type Name Description Byte [] buffer array that contain the MAP file data to load. String filename Optional filename value in DOS 8:3 format. Remarks This method always performs a color conversion if the palette is different from the FPG instance to ensure the MAP image shows properly with the current palette. The filename field in the file only allows a 12 length ASCII null terminated string. If the input string is shorter than 12 characters, the string is filled with null chars. If the input string is longer than 12 characters, getting a 12 characters length substring. Add(String) Adds a MAP file. Declaration public void Add(string filename) Parameters Type Name Description String filename MAP file to load. Remarks This method always performs a color conversion if the palette is different from the FPG instance to ensure the MAP image shows properly with the current palette. Clear() Removes all MAP in this instance. Declaration public void Clear() Contains(MAP) Determines whether a MAP is in this instance. Declaration public bool Contains(MAP map) Parameters Type Name Description MAP map The MAP to locate in this instance. Returns Type Description Boolean Returns true if the MAP exists. Contains(Int32) Determines whether a MAP with a graphic identifier is in this instance. Declaration public bool Contains(int graphId) Parameters Type Name Description Int32 graphId MAP graphic identifier to search. Returns Type Description Boolean Returns true if a MAP graphic identifier exists. GetFilename(MAP) Gets the associated filename value for this MAP in the FPG . Declaration public string GetFilename(MAP map) Parameters Type Name Description MAP map MAP instance to find. Returns Type Description String Returns the MAP filename value. GetFilename(Int32) Gets the associated filename value for this MAP in the FPG . Declaration public string GetFilename(int index) Parameters Type Name Description Int32 index The index of the MAP instance to find. Not confuse with the GraphId value. Returns Type Description String Returns the MAP filename value. GetHashCode() Generates a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 Returns an SHA256 hash code from the MD5 hash created by the binary serialized data of this instance. Remove(MAP) Removes a MAP from this instance. Declaration public void Remove(MAP map) Parameters Type Name Description MAP map MAP instance to remove. Remove(Int32) Removes a MAP from this instance. Declaration public void Remove(int graphId) Parameters Type Name Description Int32 graphId GraphId to search. RemoveAt(Int32) Removes a MAP from this instance. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index MAP index in this instance. Save(String) Saves the instance in a FPG file. Declaration public void Save(string filename) Parameters Type Name Description String filename Filename to write the data. ToString() Serializes the relevant data of this instance in a value. Declaration public override string ToString() Returns Type Description String Returns a value with the relevant serialized data in JSON format. Validate(Byte[]) Validates if the file is a valid FPG file. Declaration public bool Validate(byte[] buffer) Parameters Type Name Description Byte [] buffer Memory buffer that contain a FPG file data. Returns Type Description Boolean Returns true if the file is a valid FPG . Validate(String) Validates if the file is a valid FPG file. Declaration public bool Validate(string filename) Parameters Type Name Description String filename File to validate. Returns Type Description Boolean Returns true if the file is a valid FPG . ValidateFormat(Byte[]) Validates if the file is a valid FPG file. Declaration public static bool ValidateFormat(byte[] buffer) Parameters Type Name Description Byte [] buffer Memory buffer that contain a FPG file data. Returns Type Description Boolean Returns true if the file is a valid FPG . ValidateFormat(String) Validates if the file is a valid FPG file. Declaration public static bool ValidateFormat(string filename) Parameters Type Name Description String filename File to validate. Returns Type Description Boolean Returns true if the file is a valid FPG . Operators Equality(FPG, FPG) Equality operator. Declaration public static bool operator ==(FPG a, FPG b) Parameters Type Name Description FPG a Left FPG value to compare. FPG b Right FPG value to compare. Returns Type Description Boolean Returns true if both values are equal. Inequality(FPG, FPG) Inequality operator. Declaration public static bool operator !=(FPG a, FPG b) Parameters Type Name Description FPG a Left FPG value to compare. FPG b Right FPG value to compare. Returns Type Description Boolean Returns true if both values are not equal. Implements IEnumerable<>"
  },
  "api/DIV2.Format.Exporter.html": {
    "href": "api/DIV2.Format.Exporter.html",
    "title": "Namespace DIV2.Format.Exporter",
    "keywords": "Namespace DIV2.Format.Exporter Classes ColorPalette A representation of a 256 indexed color palette in DAC format [0..63]. ColorRange Color range values. ColorRangeTable A collection of 16 ranges that composes the PAL ColorRange table. DIVFileFormatException<T> An exception ocurred when a DIV Games Studio content data format is invalid. DIVFormatHeaderException An exception ocurred when the a DIV Games Studio file header is invalid. FPG A representation of a DIV Games Studio FPG file. MAP A representation of a DIV Games Studio MAP file. PAL A representation of a DIV Games Studio PAL file. Structs Color Color structure. ControlPoint MAP Control Point data. Enums ColorFormat Color formats. ColorRange.RangeColors Available amount of colors for the range. ColorRange.RangeTypes Available range types."
  },
  "api/DIV2.Format.Exporter.MAP.html": {
    "href": "api/DIV2.Format.Exporter.MAP.html",
    "title": "Class MAP",
    "keywords": "Class MAP A representation of a DIV Games Studio MAP file. Inheritance Object MAP Implements IEnumerable < Byte > Namespace : DIV2.Format.Exporter Assembly : DIV2.Format.Exporter.dll Syntax public sealed class MAP : object, IAssetFile, IFormatValidable, ISerializableAsset, IEnumerable<byte> Remarks Implements functions to import and export graphic maps. Constructors MAP(PAL, Int16, Int16, Int32, String) Creates a new MAP instance. Declaration public MAP(PAL palette, short width, short height, int graphId = null, string description = \"\") Parameters Type Name Description PAL palette PAL instance for this MAP instance. Int16 width Bitmap width. Int16 height Bitmap height. Int32 graphId MAP graphic identifiers. By default is 1. String description Optional MAP description. Remarks The description field in the file only allows a 32 length ASCII null terminated string. If the input string is shorter than 32 characters, the string is filled with null chars. If the input string is longer than 32 characters, getting a 32 characters length substring. MAP(Byte[]) Loads a MAP file from memory. Declaration public MAP(byte[] buffer) Parameters Type Name Description Byte [] buffer array that contain the MAP file data to load. MAP(String) Loads a MAP file. Declaration public MAP(string filename) Parameters Type Name Description String filename Filename to load. Fields DESCRIPTION_LENGTH Declaration public const int DESCRIPTION_LENGTH = null Field Value Type Description Int32 Max description character length. MAX_CONTROL_POINTS Declaration public const int MAX_CONTROL_POINTS = null Field Value Type Description Int32 Max supported ControlPoint s. MAX_GRAPH_ID Declaration public const int MAX_GRAPH_ID = null Field Value Type Description Int32 Max allowed graph id value. MIN_GRAPH_ID Declaration public const int MIN_GRAPH_ID = null Field Value Type Description Int32 Min allowed graph id value. MIN_PIXEL_SIZE Declaration public const int MIN_PIXEL_SIZE = null Field Value Type Description Int32 Min supported size value for width or height properties. Properties ControlPoints Optional control point list. Declaration public List<ControlPoint> ControlPoints { get; } Property Value Type Description List < ControlPoint > Returns the ControlPoint list for this MAP object. Count Number of pixels in the bitmap. Declaration public int Count { get; } Property Value Type Description Int32 Returns the number of pixels for this MAP object. Description Optional graphic description. Declaration public string Description { get; set; } Property Value Type Description String Gets or sets the description for this MAP object. Remarks The description field in the file only allows a 32 length ASCII null terminated string. If the input string is shorter than 32 characters, the string is filled with null chars. If the input string is longer than 32 characters, getting a 32 characters length substring. GraphId Graphic identifier used in FPG files. Declaration public int GraphId { get; set; } Property Value Type Description Int32 Gets or sets the graphic indentifier for this MAP object. Height Height of the graphic map. Declaration public short Height { get; } Property Value Type Description Int16 Returns the Height value in pixels. Item[Int32] Gets or sets the color index in the bitmap. Declaration public byte this[int index] { get; set; } Parameters Type Name Description Int32 index Pixel index in the bitmap array. Property Value Type Description Byte Returns the color index in the PAL instance. Item[Int32, Int32] Gets or sets the color index in the bitmap. Declaration public byte this[int x, int y] { get; set; } Parameters Type Name Description Int32 x Horizontal coordinate of the pixel in the bitmap. Int32 y Vertical coordinate of the pixel in the bitmap. Property Value Type Description Byte Returns the color index in the PAL instance. Palette Color palette used by this graphic map. Declaration public PAL Palette { get; } Property Value Type Description PAL Returns the PAL instance for this MAP object. Width Width of the graphic map. Declaration public short Width { get; } Property Value Type Description Int16 Returns the width value in pixels. Methods Clear() Clear the bitmap. Declaration public void Clear() Remarks This function sets all pixels to zero palette color (mostly transparent black). FromImage(Byte[]) Creates a new MAP instance from a supported image format. Declaration public static MAP FromImage(byte[] buffer) Parameters Type Name Description Byte [] buffer array that contain a supported image. Returns Type Description MAP Returns a new MAP instance from the loaded image. Remarks Supported image formats are JPEG, PNG, BMP, GIF and TGA. Also supported 256 color PCX images. FromImage(Byte[], PAL) Creates a new MAP instance from a supported image format and converts the colors to the selected PAL instance. Declaration public static MAP FromImage(byte[] buffer, PAL palette) Parameters Type Name Description Byte [] buffer array that contain a supported image. PAL palette PAL instance to convert the loaded image. Returns Type Description MAP Returns a new MAP instance from the loaded image. Remarks Supported image formats are JPEG, PNG, BMP, GIF and TGA. Also supported 256 color PCX images and MAP files, that will be converted to the new setup PAL . FromImage(String) Creates a new MAP instance from a supported image format. Declaration public static MAP FromImage(string filename) Parameters Type Name Description String filename Image file to load. Returns Type Description MAP Returns a new MAP instance from the loaded image. Remarks Supported image formats are JPEG, PNG, BMP, GIF and TGA. Also supported 256 color PCX images. FromImage(String, PAL) Creates a new MAP instance from a supported image format and converts the colors to the selected PAL instance. Declaration public static MAP FromImage(string filename, PAL palette) Parameters Type Name Description String filename Image file to load. PAL palette PAL instance to convert the loaded image. Returns Type Description MAP Returns a new MAP instance from the loaded image. Remarks Supported image formats are JPEG, PNG, BMP, GIF and TGA. Also supported 256 color PCX images and MAP files, that will be converted to the new setup PAL . GetBitmapArray() Gets the bitmap array data of this instance. Declaration public byte[] GetBitmapArray() Returns Type Description Byte [] Returns a array with all pixels with their color indexes from the PAL instance. GetHashCode() Generates a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 Returns an SHA256 hash code from the MD5 hash created by the binary serialized data of this instance. GetRGBTexture() Converts all pixel indexes to the RGB Color value from this associated PAL instance. Declaration public Color[] GetRGBTexture() Returns Type Description Color [] Returns a new Color array with all pixel data from this bitmap. All colors are RGB format [0..255]. Remarks Use this function when need to render this MAP in any modern system that works in 24 or 32 bits color space. Save(String) Saves the instance in a MAP file. Declaration public void Save(string filename) Parameters Type Name Description String filename Filename to write the data. SetBitmapArray(Byte[]) Sets the bitmap array data for this instance. Declaration public void SetBitmapArray(byte[] pixels) Parameters Type Name Description Byte [] pixels array that contains pixel data for this instance. ToString() Serializes the relevant data of this instance in a value. Declaration public override string ToString() Returns Type Description String Returns a value with the relevant serialized data in JSON format. Validate(Byte[]) Validates if the file is a valid MAP file. Declaration public bool Validate(byte[] buffer) Parameters Type Name Description Byte [] buffer Memory buffer that contain a MAP file data. Returns Type Description Boolean Returns true if the file is a valid MAP . Validate(String) Validates if the file is a valid MAP file. Declaration public bool Validate(string filename) Parameters Type Name Description String filename File to validate. Returns Type Description Boolean Returns true if the file is a valid MAP . ValidateFormat(Byte[]) Validates if the file is a valid MAP file. Declaration public static bool ValidateFormat(byte[] buffer) Parameters Type Name Description Byte [] buffer Memory buffer that contain a MAP file data. Returns Type Description Boolean Returns true if the file is a valid MAP . ValidateFormat(String) Validates if the file is a valid MAP file. Declaration public static bool ValidateFormat(string filename) Parameters Type Name Description String filename File to validate. Returns Type Description Boolean Returns true if the file is a valid MAP . Operators Equality(MAP, MAP) Equality operator. Declaration public static bool operator ==(MAP a, MAP b) Parameters Type Name Description MAP a Left MAP value to compare. MAP b Right MAP value to compare. Returns Type Description Boolean Returns true if both values are equal. Inequality(MAP, MAP) Inequality operator. Declaration public static bool operator !=(MAP a, MAP b) Parameters Type Name Description MAP a Left MAP value to compare. MAP b Right MAP value to compare. Returns Type Description Boolean Returns true if both values are not equal. Implements IEnumerable<>"
  },
  "api/DIV2.Format.Exporter.PAL.html": {
    "href": "api/DIV2.Format.Exporter.PAL.html",
    "title": "Class PAL",
    "keywords": "Class PAL A representation of a DIV Games Studio PAL file. Inheritance Object PAL Implements IEnumerable < Color > Namespace : DIV2.Format.Exporter Assembly : DIV2.Format.Exporter.dll Syntax public sealed class PAL : object, IAssetFile, IFormatValidable, ISerializableAsset, IEnumerable<Color> Remarks Implements functions to import and export color palettes. Constructors PAL() Creates a new PAL instance. Declaration public PAL() PAL(Color[]) Creates a new PAL instance from a Color array. Declaration public PAL(Color[] colors) Parameters Type Name Description Color [] colors A 256 length Color array. PAL(ColorPalette) Creates a new PAL instance. Declaration public PAL(ColorPalette colors) Parameters Type Name Description ColorPalette colors ColorPalette instance. PAL(ColorPalette, ColorRangeTable) Creates a new PAL instance. Declaration public PAL(ColorPalette colors, ColorRangeTable ranges) Parameters Type Name Description ColorPalette colors ColorPalette instance. ColorRangeTable ranges ColorRangeTable instance. PAL(Byte[]) Loads a PAL file. Declaration public PAL(byte[] buffer) Parameters Type Name Description Byte [] buffer A memory buffer that contains PAL file. PAL(String) Loads a PAL file. Declaration public PAL(string filename) Parameters Type Name Description String filename PAL filename to load. Fields LENGTH Declaration public const int LENGTH = null Field Value Type Description Int32 Number of colors. SIZE Declaration public const int SIZE = null Field Value Type Description Int32 Memory size. Properties Colors Palette colors, in DAC format. Declaration public ColorPalette Colors { get; } Property Value Type Description ColorPalette Returns the ColorPalette instance. Item[Int32] Gets or sets a Color value. Declaration public Color this[int index] { get; set; } Parameters Type Name Description Int32 index Color index. Property Value Type Description Color Returns the Color value. Ranges Color range table. Declaration public ColorRangeTable Ranges { get; } Property Value Type Description ColorRangeTable Returns the ColorRangeTable instance. Methods FromImage(Byte[], Boolean) Creates new PAL instance from a supported image file. Declaration public static PAL FromImage(byte[] buffer, bool sortColors = false) Parameters Type Name Description Byte [] buffer Memory buffer that contains a supported image file. Boolean sortColors Indicates if is needed to sort colors of the imported palette. By default is false . Returns Type Description PAL Returns a new PAL instance. Remarks Supported image formats are JPEG, PNG, BMP, GIF and TGA. Also supported 256 color PCX images, MAP and FPG files. FromImage(String, Boolean) Creates new PAL instance from a supported image file. Declaration public static PAL FromImage(string filename, bool sortColors = false) Parameters Type Name Description String filename Image file to load. Boolean sortColors Indicates if is needed to sort colors of the imported palette. By default is false . Returns Type Description PAL Returns a new PAL instance. Remarks Supported image formats are JPEG, PNG, BMP, GIF and TGA. Also supported 256 color PCX images, MAP and FPG files. GetHashCode() Generates a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 Returns an SHA256 hash code from the MD5 hash created by the binary serialized data of this instance. Save(String) Saves the instance in a PAL file. Declaration public void Save(string filename) Parameters Type Name Description String filename Filename to write the data. Sort() Sorts the Color values. Declaration public void Sort() Remarks This method try to sort the colors using the Nearest Neighbour algorithm, trying to ensure that the black color (0, 0, 0), if exists in palette, be the first color. ToRGB() Creates a copy of the Color array converted to full RGB format [0..255]. Declaration public Color[] ToRGB() Returns Type Description Color [] Returns a new Color array in full RGB format [0..255]. In most of the cases, these values are an aproximation to the real RGB value. ToString() Serializes the relevant data of this instance in a value. Declaration public override string ToString() Returns Type Description String Returns a value with the relevant serialized data in JSON format. Validate(Byte[]) Validates if the file is a valid PAL file. Declaration public bool Validate(byte[] buffer) Parameters Type Name Description Byte [] buffer Memory buffer that contain a PAL file data. Returns Type Description Boolean Returns true if the file is a valid PAL . Validate(String) Validates if the file is a valid PAL file. Declaration public bool Validate(string filename) Parameters Type Name Description String filename File to validate. Returns Type Description Boolean Returns true if the file is a valid PAL . ValidateFormat(Byte[]) Validates if the file is a valid PAL file. Declaration public static bool ValidateFormat(byte[] buffer) Parameters Type Name Description Byte [] buffer Memory buffer that contain a PAL file data. Returns Type Description Boolean Returns true if the file is a valid PAL . ValidateFormat(String) Validates if the file is a valid PAL file. Declaration public static bool ValidateFormat(string filename) Parameters Type Name Description String filename File to validate. Returns Type Description Boolean Returns true if the file is a valid PAL . Operators Equality(PAL, PAL) Equality operator. Declaration public static bool operator ==(PAL a, PAL b) Parameters Type Name Description PAL a Left PAL value to compare. PAL b Right PAL value to compare. Returns Type Description Boolean Returns true if both values are equal. Inequality(PAL, PAL) Inequality operator. Declaration public static bool operator !=(PAL a, PAL b) Parameters Type Name Description PAL a Left PAL value to compare. PAL b Right PAL value to compare. Returns Type Description Boolean Returns true if both values are not equal. Implements IEnumerable<>"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Force to redirect to API list page.",
    "keywords": "Force to redirect to API list page."
  },
  "index.html": {
    "href": "index.html",
    "title": "DIV2.Format.Exporter",
    "keywords": "DIV2.Format.Exporter © Visual Studio EX3, José Miguel Sánchez Fernández - 2020 - 2022 Multiplatform framework to converts modern graphic format images to native DIV Games Studio graphic formats: PAL, MAP and FPG files. Introduction DIV2.Format.Exporter is writen in C# using .NET Standard 2.1 and using SixLabors ImageSharp library for image and palette conversions. This library is designed initially to works in Unity editor as content creation tool for StarFighter project, but is possible to using from other implementations (e.g. a CLI program or other engines or frameworks compatible with .NET). This tool is not designed to work with DIV Games Studio forks like Fenix Project , Gemix Studio , Bennu GD or PixTudio . Documentation This site contains full API documentation for reference and small code samples to learn how to use this library: API Documentation Samples Features Multiplatform: Windows, Linux and Mac support. Image formats supported: JPEG, PNG, BMP, GIF, TGA and 8 bit PCX. PAL files: Import and export PAL files. Full access to all features: color palette and color ranges. Create PAL files from images. Extract PAL from MAP and FPG files. Optional color sorting. Allow conversions between DAC [0..63] and RGB formats [0..255]. MAP files: Import and export MAP files. Import images as MAP files. Import MAP files for palette conversion. Full features for editing: color palette, graph id, description, control points and full read/write access to bitmap data. Export as full RGB bitmap array to allow render MAP file in modern systems. FPG files: Import and export FPG files. Full access to all features: color palette, full access to MAP list and their MAP metadata. Automatic MAP list sorting using graph id value. Import images as MAP files, with palette conversion if is needed. Compatible with Unity editor (see the Unity Editor dependencies ). Future features Implements support for creation and edition of FNT files. Unity Editor dependencies Unity .NET backend supports .NET Standard 2.0 but not the full subset of libraries. In order to uses DIV2.Format.Exporter library in Unity Editor you need to add this libraries to Unity Assets folder in your project. This is the list of dependencies used and their source links from NuGet repositories: FYI: You can extract the DLL files from NuGet packages opening it as Zip files. The DLL files are located in the \"lib\" folder. What is DIV Games Studio? Wikipedia page: https://es.wikipedia.org/wiki/DIV_Games_Studio Maybe was one of the first game engines for the public. DIV Games Studio is a complete solution to develop games for MS-DOS and published in 1997 (DIV1) and 1998 (DIV2). Is a full windows graphic environment with tools for creation and editing 2D graphics (with a complete drawing suit), particle FX, character animations, font character sets, sounds effects and a complete language programming with a syntax between Pascal and C , including an integrated debugger and a full complete documentation with a lot of tutorials and samples. This engine allow to develop common 2D games with a full of advanced graphic features, and pseudo 3D games using the Mode7 and later, with DIV2, the Mode8 (3D feature like the original Doom). DIV Games Studio was very popular at the end of ninetys and early 2000. Was the start point of an entire generation of game developers of nowdays. During the years, the community was develop a multiple forks like Fenix Project (with multiple flavours), CDiv, Div GO , Gemix Studio , Bennu GD , or PixTudio . Currently exists 2 projects to bring it to live again: Div DX / DIV Games Studio 3 - A port of DIV Games Studio 2 to modern systems (running on Windows, Linux and Mac natively) but keeping the all original features of DIV Games Studio 2. One of the interested features, including the fix of most of the existing bugs on original DIV2, is the posibility of export the games natively to multiple systems, including Android, HTML5 and some consoles. This project has still in beta and seems to be abandoned since 2016. DIV Games Studio 2.02 - A reconstruction and fixing of the original DIV Games Studio 2 (v 2.01) for MS-DOS. This is an active project today where the developers want to fix the multiple bugs in the language programming and engine, improve the tools, and, maybe in a future, create a version for Amiga OS. DIV Games Studio is fully functional on DOSBox . You can download DIV Games Studio 2 ISO from Archive.org as abandoneware."
  },
  "samples/Color/samples.html": {
    "href": "samples/Color/samples.html",
    "title": "Color struct samples",
    "keywords": "Color struct samples This section shows common samples of how to work with colors to manage DIV Games Studio palettes and images. Remember that DIV Games Studio palettes working in DAC format. This means that the RGB channels ranges are 0 to 63 instead of 0 to 255. The DIV Games Studio files, PAL , MAP , FPG and FNT files, works in DAC format. If you try to set a full RGB Color value for any related DIV Games Studio file operations, or even try to load a modified file with full RGB Color values, you will gets an exception. You can use full RGB Color values when you need to export a PAL colors or the bitmap data from a MAP to use in modern systems (e.g. to render a 16x16 PAL color matrix or the bitmap image from a MAP in a custom tool using the common RGB 24/32 bits system GUI, web based GUI, or a custom GUI in major environments like Unity editor custom tool). Create a color The common way to create a new color value is using the main constructor: var color = new Color(0, 31, 63); Also you can create an empty Color value or pure black color (0, 0, 0) using the default non-parametrized consutructor and setup the color channel values later. Access color channels values You can access, to write or read, the each Color channel values: red, green and blue, using the struct fields: color.red = 0; color.green = 31; color.blue = 63; Console.Write($\"Red: {color.red}, Green: {color.green}, Blue: {color.blue}\"); // Red: 0, Green: 31, Blue: 63 And also, like a vector structure, you can using a direct accessor by index position: color[0] = 0; color[1] = 31; color[2] = 63; Console.Write($\"Red: {color[0]}, Green: {color[1]}, Blue: {color[2]}\"); // Red: 0, Green: 31, Blue: 63 Check if the color is a valid DAC value You can check if a Color value is a DAC value using the following function: bool isDACColor = color.IsDAC(); Note This function only checks if the color channels values are bounded in the DAC range [0..63]. There is not way to ensure if a color value is a true DAC or full RGB value [0..255]. Convert a DAC color to RGB equivalent You can convert any DAC color to his equivalent RGB value using the following function. Remember that the value is a closer approximation of the real RGB value: Color rgbColor = color.ToRGB(); Convert a RGB color to DAC equivalent You can convert any RGB color to his equivalent DAC value using the following function. Remember that the value is a closer approximation of the real DAC value: Color dacColor = color.ToDAC(); Using an integer value as a Color struct value and viceversa The Color structure can be casted to integer values and viceversa. This is useful in some scenaries where you need to implements algorithms that are more effective working with simple numbers than a structures, for example, for sorting processes or similar actions. You can cast an integer value as Color simply assigning the value using the assignation operator: Color color = 33023; Console.Write(color); // { Color: { Red: 0, Green: 128, Blue: 255 } } And viceversa, you can cast a Color value to an integer value in the similar way: int color = (int)new Color(0, 128, 255); Console.Write(color); // 33023"
  },
  "samples/FPG/samples.html": {
    "href": "samples/FPG/samples.html",
    "title": "FPG class samples",
    "keywords": "FPG class samples This section shows common samples of how to create and manage DIV Games Studio graphic package files. DIV Games Studio FPG file is a simple file package format designed to store multiple MAP graphics sharing a common PAL color palette, is nearly an atlas like we used on modern game engines to group various sprites in a single file. In DIV Games Studio this feature ease the manage of animations and group of related sprites when need to manage in code. Note The FPG files required that each MAP graphic has an unique graph id value, from 1 to 999 (the FPG files are limited to 1000 MAP graphics). Not is necessary that all graph id s are sequentially. You can create different series of ids or set jumps between ids (e.g.: 1, 2, 3, 16, 24, 32, 48, 64, 96, 100, 101, 102, 200, 300, 301, 302, 600...). By default, DIV Games Studio not sorted the MAP graphics by his graph id value (that is useful to easy locates them in the built-in visor) but DIV2.Format.Exporter does sort them when you save the FPG file to disk. Create a new FPG This code shows how to create an empty FPG instance initialized with a specific PAL instance: var palette = new PAL(\"DIV.PAL\"); var fpg = new FPG(palette); Load a FPG file This code shows how to load an existing FPG file: var fpg = new FPG(\"PLAYER.FPG\"); Also you can load a FPG file from a byte array: byte[] buffer = System.IO.File.ReadAllBytes(\"PLAYER.FPG\"); var fpg = new FPG(buffer); Read a MAP graphic This code shows how to read an existing MAP from a FPG instance using his index position: var map = fpg[16]; // Gets the MAP in the FPG at index 16. And also, you can use a foreach loop to read all MAP s: foreach (MAP map in fpg) { Console.WriteLine(map); // Prints the current MAP properties in console. } Add a new MAP graphic This code shows how to add a new MAP to the FPG instance: var map = new MAP(\"RUN101.MAP\"); fpg.Add(map); Also you can load a MAP file from a byte array and add them in the same way: byte[] buffer = System.IO.File.ReadAllBytes(\"RUN101.MAP\"); fpg.Add(buffer); Or simply load by filename: fpg.Add(\"RUN101.MAP\"); The Add method, and his overloads, checks the graphId before add the MAP and thrown an exception if already exists a MAP with the same graphId . Note The Add method, and his overloads, always performs a color conversion if the palette is different from the FPG instance to ensure the MAP graphic shows properly with the current palette. Remove a MAP graphic This code shows how to remove a MAP from a FPG instance using different ways: var map = new MAP(\"RUN101.MAP\"); fpg.Remove(map); // Removes the MAP that match with this instance. fpg.Remove(101); // Removes the MAP with graphId 101. fpg.RemoveAt(16); // Removes the MAP at index 16. Check if a FPG contains an specific MAP graphic This code shows how to check if a FPG instance contains an specific MAP : var map = new MAP(\"RUN101.MAP\"); bool exists = fpg.Contains(map); bool exists = fpg.Contains(101); // Checks if the FPG contains any MAP with graphId 101. Replace an existing MAP graphic This code shows how to replace MAP from a FPG instance: // How to replace the MAP with graphId 101 on a FPG file: var fpg = new FPG(\"PLAYER.FPG\"); // Loads the new MAP to replace an existing one. // For this sample, we assume that this MAP has the graphId 101: var map = new MAP(\"RUN101.MAP\"); // Removes the current MAP with graphId 101: fpg.Remove(101); // Adds the new MAP: fpg.Add(map); Removes all MAP graphics You can removes all MAP s from a FPG instance using the following call: fpg.Clear(); Save FPG to file You can easily save your changes to a FPG file using the following call: fpg.Save(\"PLAYER.FPG\");"
  },
  "samples/intro.html": {
    "href": "samples/intro.html",
    "title": "DIV2.Format.Exporter common samples",
    "keywords": "DIV2.Format.Exporter common samples This section contains a samples about the DIV2.Format.Exporter API. The samples are grouped by the relevant API classes and structs following with a short explanations to help you to learn how to use the common and main features to create your content ready to use in DIV Games Studio projects. Color struct samples Samples to show how to work with colors in DIV Games Studio palettes and images. PAL class samples Samples to show how to create or edit DIV Games Studio color paletes. MAP class samples Samples to show how to create or edit DIV Games Studio graphic images. FPG class samples Samples to show how to create or edit DIV Games Studio file graphic packages."
  },
  "samples/MAP/samples.html": {
    "href": "samples/MAP/samples.html",
    "title": "MAP class samples",
    "keywords": "MAP class samples This section shows common samples of how to create and manage DIV Games Studio graphic maps. A MAP object is the image format used by DIV Games Studio to represents a bitmap or texture in his engine. Is basically a simple uncompressed bitmap with a palette (a PAL data). One interesting feature of the MAP format is the Control Point list. A Control Point is a coordinate, in MAP bitmap space, that represents a \"hot spot\", like how works in the Windows Cursor images. This point coordinates are relatives to the image bitmap but are translated to the screen space when you draw the MAP image. This feature helps the programmer to define the logical center of the image, used to for draw, rotate and scale operations, but also, and is the main useful usage, to easily place other objects related with the MAP position in screen (e.g. a ship engine particle or a bullet from a weapon barrel). By default, all MAP images has a default Control Point that reference the center of the image. You can overwrite the default Control Point coordinates and create new ones as many you need, with a limit of 1000 points in total. Note Only the first Control Point is used as center of the image for draw, rotate and scale operations. The MAP format also contains other data like a graph id and a description fields. The graph id is used as index to reference a MAP image. The description is an optional field used to add a little description of the image. Note The graph id value is not required for standalone MAP images (in this case, DIV Games Studio assigned one when you load a MAP from a file). This field value only is required when you want to store the image in a FPG file. Create a new MAP graphic This code shows how to create an empty 64x128 MAP instance, with a graph id and a description values. You can omit these fields to use default values: var palette = new PAL(\"DIV.PAL\"); var map = new MAP(palette, 64, 128, 12, \"Test map.\"); Load a MAP graphic This code shows how to load an existing MAP file: var map = new MAP(\"PLAYER.MAP\"); Also you can load a MAP file from a byte array: byte[] buffer = System.IO.File.ReadAllBytes(\"PLAYER.MAP\"); var map = new MAP(buffer); Import a supported image format This code shows how to import a supported image file (JPEG, PNG, BMP, GIF, TGA and PCX) as MAP image. The process converts all original colors to a 8 bits (256 colors) format: var map = MAP.FromImage(\"PLAYER.PNG\"); Warning PCX import feature only supports 8 bits (256 colors) PCX images. If you try to import a PCX image with other BPP format, you thrown an exception. Converts all colors to a specific palette When you imports a supported image file, you can also specify a PAL instance to convert the original colors to a specific colors: var palette = new PAL(\"DIV.PAL\"); var map = MAP.FromImage(\"PLAYER.PNG\", palette); Note You can imports MAP files to apply color conversion. Write bitmap colors You can write a palette color index from the bitmap using the pixel index: map[42] = 224; // Writes the color index 224 in the pixel index 42. Also you can use the pixel coordinates to write it: map[32, 24] = 224; // Writes the color index 224 in the pixel located in x32 y24. If you need to write all bitmap data in one step you can use this way: ... // Creates a 64x64 MAP image. var bitmap = new byte[64 * 64]; // Creates a 64x64 byte array. ... // Sets color indexes in each pixel. map.SetBitmapArray(bitmap); Note Remember that the bitmap pixels store the color index in the assigned palette, a value from 0 to 255, instead the RGB-DAC values. Read bitmap colors You can read a palette color index from the bitmap using the pixel index: byte colorIndex = map[42]; // Reads the color index from pixel index 42. Also you can use the pixel coordinates to read it: byte colorIndex = map[32, 24]; // Reads the color index from pixel located in x32 y24. Also you can read each pixel using a foreach loop: foreach (byte colorIndex in map) { Console.WriteLine(colorIndex); // Prints the color index of the current pixel. } If you need to read all bitmap data you can use this way: byte[] bitmap = map.GetBitmapArray(); Get the RGB texture If you need, for example, render the bitmap in a custom tool, that works with full RGB 24/32 bits, you can get a copy of the all colors in RGB format [0..255] using a simple call: Color[] texture = map.GetRGBTexture(); Clear all bitmap data You can erase all bitmap data using this call. This method sets all pixels to zero, the first color of the palette (usually expected black color for transparency): map.Clear(); Manage Control Points The management of the Control Point s list is the same as the List<T> generic class. You can read any point using his index in the list: ControlPoint point = map.ControlPoints[0]; // Reads the first/default control point. Also you can read each one using a foreach loop: foreach (ControlPoint point in map.ControlPoints) { Console.WriteLine(point); // Prints the Control Point coordinates. } Use the Add method to add new point to the list: map.ControlPoints.Add(new ControlPoint(16, 16)); // Adds a new Control Point in x16 y16. Use the RemoveAt method to remove a point using his index position: map.ControlPoints.RemoveAt(2); // Removes the third (index 2) Control Point. And use the Clear method to remove all points: map.ControlPoints.Clear(); Note Don't worry if you keep empty the Control Point s list. By default, if not exists any point, DIV Games Studio created a default one with the center coordinates of the bitmap. Get or set the GraphID value You can get or set the graph id value using the following property: int graphId = map.GraphId; map.GraphId = 10; Note This value is only required when you want to store the MAP in a FPG file. If you want to load the image from a file instead, this value is omitted and DIV Games Studio assigned one automatically. By default, this value is 1. Warning If you try to sets a value under 1 or over 999, you thrown an exception. Get or set the Description value You can get or set the description value using the following property: string description = map.Description; map.Description = \"A simple description.\"; Note The description field has a limit of 32 characters. You can enter any string value with more of 32 characters, but when you save the MAP file, this field save only the first 32 characters. This field is optional. Save MAP graphic to a file You can easily save your changes to a MAP file using the following call: map.Save(\"NEWMAP.MAP\");"
  },
  "samples/PAL/samples.html": {
    "href": "samples/PAL/samples.html",
    "title": "PAL class samples",
    "keywords": "PAL class samples This section shows common samples of how to create and manage DIV Games Studio palettes. Note Usually is not necessary to edit the Color Range Tables in a palette to make it usable in games. Color Range Tables are used by the DIV Games Studio built-in Drawing Editor. The default Color Range Tables initialization performed by this framework is enough to use in this program. We are skipped all operations related with Color Range Tables in palettes in this section. Create an empty palette This code shows how to create an empty PAL instance and setup colors manually: var palette = new PAL(); palette[0] = new Color(0, 0, 0); palette[1] = new Color(63, 0, 0); palette[2] = new Color(63, 63, 63); ... Also you can setup a Color array to initialize a new palette: var colors = new Color[256]; ... // Sets each Color array element value. var palette = new PAL(colors); Warning Remember that DIV Games Studio palettes working in DAC format. This means that the RGB channel ranges are 0 to 63 instead of 0 to 255. If you trying to initialize a palette using values over 63 for any color channel, you thrown an exception. Load an existing palette This code shows how to load a PAL file: var palette = new PAL(\"DIV.PAL\"); Also you can load a PAL file from a byte array: byte[] buffer = System.IO.File.ReadAllBytes(\"DIV.PAL\"); var palette = new PAL(buffer); Create a palette from an image You can create palettes from a image file. The process allows you to load an image file (JPEG, PNG, BMP, GIF, and TGA image formats, and also supported 256 colors PCX files), extract all unique colors from the image, and convert them to 8 bit DAC format. var palette = PAL.FromImage(\"background.png\"); Also you can create the palette from a byte array with the content of the image file: byte[] buffer = System.IO.File.ReadAllBytes(\"background.png\"); var palette = PAL.FromImage(buffer); You can perform a sorting color action when creates the palette from a image: var palette = PAL.FromImage(\"background.png\", sortColors: true); byte[] buffer = System.IO.File.ReadAllBytes(\"background.png\"); var palette = PAL.FromImage(buffer, sortColors: true); Note Not is a requirement to sort the colors in a palette but is recomended to ensure that the black color, if is present in the palette, was the first color (index zero). DIV Games Studio draw operations usually uses the first color in a palette, the black, as transparent color for sprite masks. Extract palettes from MAP and FPG files You can create the palette from the existing one from a MAP or FPG file like you load a supported image file: var palette = PAL.FromImage(\"COIN.MAP\"); var palette = PAL.FromImage(\"PLAYER.FPG\"); Read colors You can easily read each color of the palette using a direct accessor, like an array: Color color = palette[42]; // Reads the color at index 42. And also, you can use a foreach loop to read all colors: foreach (Color color in palette) { Console.WriteLine(color); // Prints the current color value in console. } Write colors You can easily write each color of the palette using a direct accessor, like an array: palette[42] = new Color(0, 16, 63); // Writes the color at index 42. Warning Remember that DIV Games Studio palettes working in DAC format. This means that the RGB channel ranges are 0 to 63 instead of 0 to 255. If you trying to set a value over 63 for any color channel, you thrown an exception. Sort colors You can manually perform a color sorting in your palettes. This action trying to sort the colors, from the black, or the darkest color in palette, to the white or the brightest color in the palette: palette.Sort(); Note Not is a requirement to sort the colors in a palette but is recomended to ensure that the black color, if is present in the palette, was the first color (index zero). DIV Games Studio draw operations usually uses the first color in a palette, the black, as transparent color for sprite masks. Save palette to a file You can easily save your palette to a PAL file using the following call: palette.Save(\"NEW.PAL\"); Get full RGB colors If you need, for example, render the 16x16 palette color matrix in a custom tool, that works with full RGB 24/32 bits, you can get a copy of the all colors in RGB format [0..255] using a simple call: Color[] rgbPaletteColors = palette.ToRGB();"
  }
}